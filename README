Contact management system in Java, we can create a simple application using Spring Boot for the backend and Thymeleaf for the user interface. The system will allow managing contacts with CRUD (Create, Read, Update, Delete) functionalities.

Project Structure
Contact: Class that represents contacts.
ContactRepository: Interface to manage contact persistence.
ContactController: Controller that manages HTTP requests for contacts.
Thymeleaf Templates: For the user interface.
H2 Database: To store contact data.
Steps to Create the Project
Create the Project with Spring Boot:

Use Spring Initializr to generate the project with the following dependencies:
Spring Web
Spring Data JPA
H2 Database
Thymeleaf
Package Structure:

com.example.contactmanagement (main package)
controller (for the controller)
model (for the Contact class)
repository (for the repository)

Code Explanation
Contact: Class that represents contacts in the management system. Each contact has a name, email, and phone number.

ContactRepository: JPA interface to manage CRUD operations for contacts.

ContactController: Controller that manages routes to create, view, update, and delete contacts.

Thymeleaf Templates: Templates to create the user interface for contact management.

H2 Database: An in-memory database for development and testing.

Possible Expansions
Authentication and Authorization: Add authentication to protect access to the system.

Search and Filter: Add functionality to search and filter contacts by name, email, or phone number.

Integration with External APIs: Integrate with APIs to synchronize contacts with other platforms such as Google Contacts or Microsoft Outlook.

Advanced Validations: Add advanced validations to ensure data integrity, such as checking email and phone formats.